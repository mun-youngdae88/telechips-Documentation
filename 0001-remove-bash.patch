From b62584b921da8fb2791d582e963ef27a0f1c2bc1 Mon Sep 17 00:00:00 2001
From: Myunghwan Kim <mh.kim@telechips.com>
Date: Thu, 4 Apr 2024 20:03:14 +0900
Subject: [PATCH] remove bash

---
 TOPST-D3/Software/Sample_Application/1. Audio.md       |  4 ++--
 TOPST-D3/Software/Sample_Application/2. Echo Server.md |  2 +-
 TOPST-D3/Software/Sample_Application/3. GPIO.md        |  2 +-
 TOPST-D3/Software/Sample_Application/4. SPI.md         |  6 +++---
 TOPST-D3/Software/Sample_Application/5. UART.md        |  2 +-
 TOPST-D3/Software/Sample_Application/6. I2C.md         |  4 ++--
 TOPST-D3/Software/Sample_Application/7. PWM.md         |  4 ++--
 TOPST-VCP/Software/SDK/3. Environment Setting.md       |  4 ++--
 TOPST-VCP/Software/SDK/4. Toolchain.md                 | 10 +++++-----
 TOPST-VCP/Software/SDK/5. Source code.md               |  8 ++++----
 TOPST-VCP/Software/SDK/6. Build.md                     |  6 +++---
 TOPST-VCP/Software/SDK/7. FirmwareDownload.md          | 10 +++++-----
 12 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/TOPST-D3/Software/Sample_Application/1. Audio.md b/TOPST-D3/Software/Sample_Application/1. Audio.md
index cc1256b..9ace4b9 100755
--- a/TOPST-D3/Software/Sample_Application/1. Audio.md	
+++ b/TOPST-D3/Software/Sample_Application/1. Audio.md	
@@ -35,7 +35,7 @@ An example was made by using a demo program based on Advanced Linux Sound Archit
 
 The example program records sound for 3 seconds and plays the recorded sound.
 
-```bash
+```
 $ audioExample
 ```
 <p align="center">
@@ -43,7 +43,7 @@ $ audioExample
 </p>
 <p align="center"><strong>Figure 1.1 Audio Example</strong></p>
 
-```bash
+```
 $ man aplay
 
 arecord, aplay - command-line sound recorder and player for ALSA soundcard driver
diff --git a/TOPST-D3/Software/Sample_Application/2. Echo Server.md b/TOPST-D3/Software/Sample_Application/2. Echo Server.md
index c3a6f36..b2b06e4 100755
--- a/TOPST-D3/Software/Sample_Application/2. Echo Server.md	
+++ b/TOPST-D3/Software/Sample_Application/2. Echo Server.md	
@@ -4,7 +4,7 @@ Echo Server is a demo program that can check Transmission Control Protocol (TCP)
 
 Echo Server prints the received messages in order and ends when it receives a **q** message.
 
-```bash
+```
 $ echoserverExample 9999
 ```
 
diff --git a/TOPST-D3/Software/Sample_Application/3. GPIO.md b/TOPST-D3/Software/Sample_Application/3. GPIO.md
index 2261614..f65391c 100755
--- a/TOPST-D3/Software/Sample_Application/3. GPIO.md	
+++ b/TOPST-D3/Software/Sample_Application/3. GPIO.md	
@@ -14,7 +14,7 @@ The following is an example of testing the input and output of the board. You ca
 
 **Example:**
 
-```bash
+```
 $ gpioExample
 $ gpioExample -g 82 -o 1
 $ gpioExample -g 82 -o 0
diff --git a/TOPST-D3/Software/Sample_Application/4. SPI.md b/TOPST-D3/Software/Sample_Application/4. SPI.md
index 7f56104..453d174 100755
--- a/TOPST-D3/Software/Sample_Application/4. SPI.md	
+++ b/TOPST-D3/Software/Sample_Application/4. SPI.md	
@@ -4,7 +4,7 @@ Serial Peripheral Interface (SPI) is a serial communication method like I2C, CAN
 
 The following is a demo program for accessing standard Linux spidev devices from userspace.
 
-```bash
+```
 USAGE: ./spiTest -d dev -l len -m mosi -s speed
   -d,--device dev: name of the spi device node
 	  -l,--length len: length of spi transaction(bytes)
@@ -15,7 +15,7 @@ USAGE: ./spiTest -d dev -l len -m mosi -s speed
 
 **Example:**
 
-```bash
+```
 $ ./spiTest -d /dev/spidev0.0 -l 4 -m 12AB
 ```
 
@@ -243,7 +243,7 @@ You can use the following command to test a program that controls dot-matrix thr
 
 <br/><br/>
 
-```bash
+```
 $ pip3 install luma.core
 $ matrix.demo.py
 ```
diff --git a/TOPST-D3/Software/Sample_Application/5. UART.md b/TOPST-D3/Software/Sample_Application/5. UART.md
index ac2be48..c651e6b 100755
--- a/TOPST-D3/Software/Sample_Application/5. UART.md	
+++ b/TOPST-D3/Software/Sample_Application/5. UART.md	
@@ -6,7 +6,7 @@ When exchanging data, the data transmission speeds of the sender and receiver mu
 
 The following is a demo program for simple serial communication with the UART protocol.
 
-```bash
+```
 $ ./uartexample
 ```
 
diff --git a/TOPST-D3/Software/Sample_Application/6. I2C.md b/TOPST-D3/Software/Sample_Application/6. I2C.md
index 15431ac..a856555 100755
--- a/TOPST-D3/Software/Sample_Application/6. I2C.md	
+++ b/TOPST-D3/Software/Sample_Application/6. I2C.md	
@@ -9,7 +9,7 @@ The I2C communication consists of one line SDA for transmitting and receiving da
 - Time-free advantage because it is a synchronous communication method that uses clock signals
 - The disadvantage of being unsuitable for long data because address data is always attached for slave selection
 
-```bash
+```
 $ man i2cdetect
 
 
@@ -78,7 +78,7 @@ Each cell in the output table will contain one of the following symbols:
 </p>
 <p align="center"><strong>Figure 6.1 I2C Device</strong></p>
 
-```bash
+```
 $ pip install RPLCD
 $ rplcd-tests i2c testsuite expander=PCF8574 addr=0x3f port=1 cols=16 rows=2 charmap=A00
 ```
diff --git a/TOPST-D3/Software/Sample_Application/7. PWM.md b/TOPST-D3/Software/Sample_Application/7. PWM.md
index 26fd554..53a91e0 100755
--- a/TOPST-D3/Software/Sample_Application/7. PWM.md	
+++ b/TOPST-D3/Software/Sample_Application/7. PWM.md	
@@ -102,7 +102,7 @@ int main(void) {
 
 The following is a demo program to control the brightness of LED by using PWM.
 
-```bash
+```
 USAGE: pwmexample.py [-h] [-cn CHIPNUM] [-p PERIOD] [-cy CYCLENUM]
 
 optional arguments:
@@ -116,7 +116,7 @@ optional arguments:
 
 **Example:**
 
-```bash
+```
 $ python3 pwmexample.py -cn 0 -p 100000 -cy 3
 ```
 
diff --git a/TOPST-VCP/Software/SDK/3. Environment Setting.md b/TOPST-VCP/Software/SDK/3. Environment Setting.md
index cbd741b..fd59040 100755
--- a/TOPST-VCP/Software/SDK/3. Environment Setting.md	
+++ b/TOPST-VCP/Software/SDK/3. Environment Setting.md	
@@ -29,7 +29,7 @@ The “apt” package manager is a powerful tool in Ubuntu, allowing you to inst
 
 Before installing any new software, it's a good practice to update the list of available packages. This ensures you're getting the latest versions and dependencies.
 
-```bash
+```
 $ sudo apt update
 $ sudo apt upgrade
 ```
@@ -48,7 +48,7 @@ For most development tasks, especially for the TOPST-VCP board, some common tool
 
 Install these tools using the following command :
 
-```bash
+```
 $ sudo apt install build-essential git
 ```
 
diff --git a/TOPST-VCP/Software/SDK/4. Toolchain.md b/TOPST-VCP/Software/SDK/4. Toolchain.md
index 3066ca4..c00375c 100755
--- a/TOPST-VCP/Software/SDK/4. Toolchain.md	
+++ b/TOPST-VCP/Software/SDK/4. Toolchain.md	
@@ -24,7 +24,7 @@ Follow the steps below to download, extract, and set up the toolchain:
 
 1. **Download the Toolchain** : Use wget command to download the toolchain from the Linaro website :
 
-    ```bash
+    ```
     $ wget https://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/arm-eabi/gcc-linaro-7.2.1-2017.11-x86_64_arm-eabi.tar.xz
     ```
 
@@ -40,7 +40,7 @@ Follow the steps below to download, extract, and set up the toolchain:
 
 2. **Extract the Toolchain** : Once the download is complete, extract the contents of the .tar.xz file.
 
-    ```bash
+    ```
     $ tar -xvf gcc-linaro-7.2.1-2017.11-x86_64_arm-eabi.tar.xz
     ```
 
@@ -52,7 +52,7 @@ Follow the steps below to download, extract, and set up the toolchain:
 
 3. **Move the Toolchain to /opt** : The /opt directory is a standard location for optional software on Linux. Move the extracted toolchain to this directory.
 
-    ```bash
+    ```
     $ sudo mv gcc-linaro-7.2.1-2017.11-x86_64_arm-eabi /opt/
     ```
 
@@ -70,7 +70,7 @@ To ensure that the toolchain has been installed correctly:
 
 1. **Navigate to the toolchain directory** :
 
-    ```bash
+    ```
     $ cd /opt/gcc-linaro-7.2.1-2017.11-x86_64_arm-eabi
     ```
 
@@ -81,7 +81,7 @@ To ensure that the toolchain has been installed correctly:
 
 2. **Check the version of the installed GCC compiler** :
     
-    ```bash
+    ```
     $ ./bin/arm-eabi-gcc --version
     ```
 
diff --git a/TOPST-VCP/Software/SDK/5. Source code.md b/TOPST-VCP/Software/SDK/5. Source code.md
index 37828f0..da10a55 100755
--- a/TOPST-VCP/Software/SDK/5. Source code.md	
+++ b/TOPST-VCP/Software/SDK/5. Source code.md	
@@ -15,7 +15,7 @@ Follow these steps to clone the TOPST-VCP source code:
 1. **Open Terminal** : Launch the terminal application on your Ubuntu 22.04 system.
 2. **Navigate to Desired Directory** : Choose a suitable location on your system where you'd like to save the source code. For instance, if you'd like to save it in the user home directory, use the command
 
-    ```bash
+    ```
     $ cd ~
     ```
 
@@ -25,7 +25,7 @@ Follow these steps to clone the TOPST-VCP source code:
 
 3. **Clone the Repository** : Use the following command to clone the TOPST-VCP source code from the provided git address
 
-    ```bash
+    ```
     $ git clone https://git.huconn.com/topst-vcp/topst-vcp-bsp-freertos.git
     ```
 <p align="center">
@@ -35,7 +35,7 @@ Follow these steps to clone the TOPST-VCP source code:
 
 4. **Navigate to the Cloned Directory** : Once the cloning process is complete, use the following command to navigate to the directory containing the source code
 
-    ```bash
+    ```
     $ cd topst-vcp-bsp-freertos
     ```
 
@@ -53,7 +53,7 @@ After cloning, it's beneficial to familiarize yourself with the directory struct
 - Use commands like ls to list the contents of directories.
 - Explore key directories and files to understand their purpose and functionality.
 
-```bash
+```
 $ ls -al
 ```
   
diff --git a/TOPST-VCP/Software/SDK/6. Build.md b/TOPST-VCP/Software/SDK/6. Build.md
index 52da673..2db87ef 100755
--- a/TOPST-VCP/Software/SDK/6. Build.md	
+++ b/TOPST-VCP/Software/SDK/6. Build.md	
@@ -16,13 +16,13 @@ To start building the source code, follow these steps :
 
 1. **Use the following command to navigate to the Build Directory :**
 
-    ```bash
+    ```
     $ cd build/tcc70xx/gcc/
     ```
 
 2. **Use the following command to run the make command :**
 
-    ```bash
+    ```
     $ make
     ```
 
@@ -46,7 +46,7 @@ This command reads the Makeflie in the current directory and executes the build
     <p align="center"><strong>Figure 6.2 Verify the Build Output</strong></p>
     To make sure all output files, use the following command :   
     
-    ```bash
+    ```
     $ ls output/ -al
     ```
 
diff --git a/TOPST-VCP/Software/SDK/7. FirmwareDownload.md b/TOPST-VCP/Software/SDK/7. FirmwareDownload.md
index 7397666..b127227 100755
--- a/TOPST-VCP/Software/SDK/7. FirmwareDownload.md	
+++ b/TOPST-VCP/Software/SDK/7. FirmwareDownload.md	
@@ -15,7 +15,7 @@ Before beginning the download process, ensure the TOPST-VCP board is in a stable
 1. **USB C Cable Connection:** Use a USB C cable to connect the TOPST-VCP board to your development host PC.
 2. **Verify the Connection**: On your Linux machine, execute the following command
 
-    ```bash
+    ```
     $ sudo mesg | grep tty
     ```
 
@@ -41,7 +41,7 @@ If you see the above output, the connection has been established correctly.
 
 2. **Execute the Download Command** : Use the FWDN tool to download the software for 4MB flash onto the Board
 
-    ```bash
+    ```
     $ ../../../tools/fwdn_vcp/fwdn --fwdn ../../../tools/fwdn_vcp/vcp_fwdn.rom -w output\tcc70xx_pflash_boot_4M_ECC.rom
     ```
 <p align="center">
@@ -68,7 +68,7 @@ Once the software is downloaded to the board, it's crucial to verify its correct
 
 1. **Open a Serial Connection** : Use the following command to initiate a serial connection
 
-    ```bash
+    ```
     $ minicom -D /dev/ttyUSB0 -b 115200 -8
     ```
 
@@ -94,7 +94,7 @@ Even with meticulous preparation, you might occasionally encounter issues during
 
 1. **Modify User Group Permissions** : Execute the following command
 
-    ```bash
+    ```
     $ sudo usermod -aG dialout $USER
     ```
 
@@ -115,7 +115,7 @@ Remember, the majority of issues you encounter will have solutions or workaround
 
     Start to minicom tool by simply typing :
 
-    ```bash
+    ```
     $ minicom -D /dev/ttyUSB0 -b 115200 -8
     ```
 
-- 
2.34.1

